#!/usr/bin/env python2
import argparse
import rospy
import actionlib
from action_minimal.msg import MinimalAction, MinimalGoal


def main(args):
    rospy.init_node('minimal_client')

    # wait for service for 5 seconds then create ServiceProxy
    timeout = 5.0
    action_client = actionlib.SimpleActionClient(args.action_name, MinimalAction)
    if not action_client.wait_for_server(timeout=rospy.Duration(timeout)):
        print('failed to wait for action server "%s" after "%d" seconds' % (args.action_name, timeout))
        return

    action_goal = MinimalGoal()
    if getattr(action_goal, 'goal', None) is None:
        print('please modify Minimal.action to appropriate values"')
        return

    action_goal.goal.a = args.x
    action_goal.goal.b = args.y
    action_goal.goal.operation = args.operation

    action_client.send_goal(action_goal)
    if not action_client.wait_for_result(rospy.Duration(timeout)):
        print('failed to wait for result from server "%s" after "%d" seconds' % (args.action_name, timeout))
        return

    action_result = action_client.get_result()
    if getattr(action_result, 'result', None) is None:
        print('MinimalResult does not have field "result" of type "float32"')
        return

    print('%.3f %s %.3f = %.3f' % (args.a, args.operation, args.b, action_result.result))
    return


if __name__ == '__main__':
    parser = argparse.ArgumentParser(description='Tool to test the minimal action server')
    parser.add_argument('--action-name', '-a', default='/minimal_server', help='name of the minimal action server')
    parser.add_argument('x', type=float, help='first number')
    parser.add_argument('y', type=float, help='second number')
    parser.add_argument('operation', type=str, help='operation')

    args = parser.parse_args()
    main(args)
